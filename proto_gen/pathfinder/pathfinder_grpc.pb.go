// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pathfinder

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PathfinderClient is the client API for Pathfinder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PathfinderClient interface {
	Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error)
}

type pathfinderClient struct {
	cc grpc.ClientConnInterface
}

func NewPathfinderClient(cc grpc.ClientConnInterface) PathfinderClient {
	return &pathfinderClient{cc}
}

func (c *pathfinderClient) Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error) {
	out := new(FindResponse)
	err := c.cc.Invoke(ctx, "/pathfinder.Pathfinder/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PathfinderServer is the server API for Pathfinder service.
// All implementations must embed UnimplementedPathfinderServer
// for forward compatibility
type PathfinderServer interface {
	Find(context.Context, *FindRequest) (*FindResponse, error)
	mustEmbedUnimplementedPathfinderServer()
}

// UnimplementedPathfinderServer must be embedded to have forward compatible implementations.
type UnimplementedPathfinderServer struct {
}

func (UnimplementedPathfinderServer) Find(context.Context, *FindRequest) (*FindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedPathfinderServer) mustEmbedUnimplementedPathfinderServer() {}

// UnsafePathfinderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PathfinderServer will
// result in compilation errors.
type UnsafePathfinderServer interface {
	mustEmbedUnimplementedPathfinderServer()
}

func RegisterPathfinderServer(s grpc.ServiceRegistrar, srv PathfinderServer) {
	s.RegisterService(&Pathfinder_ServiceDesc, srv)
}

func _Pathfinder_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PathfinderServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathfinder.Pathfinder/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PathfinderServer).Find(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Pathfinder_ServiceDesc is the grpc.ServiceDesc for Pathfinder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pathfinder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pathfinder.Pathfinder",
	HandlerType: (*PathfinderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Find",
			Handler:    _Pathfinder_Find_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pathfinder/pathfinder.proto",
}
